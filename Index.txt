https://visualgo.net/

https://eylearning.udemy.com/course/master-the-coding-interview-data-structures-algorithms/learn/lecture/12139582#overview
https://eylearning.udemy.com/course/js-algorithms-and-data-structures-masterclass/learn/lecture/8344106#overview
https://eylearning.udemy.com/course/data-structures-and-algorithms-java/learn/lecture/28748652#overview

https://www.udemy.com/course/java-data-structures-and-algorithms-masterclass/learn/lecture/24182408#learning-tools

https://walkccc.me/LeetCode/problems/0003/

private void ListInOrder(BNode node, string s)
{
    Console.WriteLine(s + " * " +node?.Value);
    if (node == null)
    {
        Console.WriteLine("------------------");
        return;
    }

    ListInOrder(node.Left, "L");  
    Console.WriteLine(node.Value + " ^ " + s);
    ListInOrder(node.Right, "R");
    Console.WriteLine(node.Value + " - " + s);
}

static void Factorial()
{
    int n = 5; 
    int result = 1;

    for (int i = 1; i <= n; i++)
    {
        result *= i;
    }

    Console.WriteLine("{0}! = {1}", n, result);
}

static void Fibonacci()
{
    int n = 10;
    int a = 0, b = 1, c;

    for (int i = 2; i < n; i++)
    {
        c = a + b;
        Console.Write(" {0}", c);
        a = b;
        b = c;
    }
}

static void SumDigits()
{
    int number = 739;
    int sum = 0;
    while (number > 0) {
        int digit = number % 10; // get the rightmost digit
        sum += digit; // add the digit to the sum
        number /= 10; // remove the rightmost digit from the number
    }

    Console.WriteLine("The sum of digits is: " + sum); // // (739 % 10 = 9) | (739 / 10 = 73) 
}

public static int GetGCD(int num1, int num2)
{

    // Use Euclid's algorithm to find the GCD
    int remainder = num1 % num2;
    while (remainder != 0)
    {
        num1 = num2;
        num2 = remainder;
        remainder = num1 % num2;
    }

    return num2;
}
int gcd = GetGCD(12, 18); // returns 6

public static string DecimalToBinary(int decimalNumber)
{
    if (decimalNumber == 0)
    {
        return "0";
    }

    string binaryString = string.Empty;
    while (decimalNumber > 0)
    {
        int remainder = decimalNumber % 2;
        binaryString = remainder + binaryString;
        decimalNumber /= 2;
    }

    return binaryString;
}
string binaryNumber = DecimalToBinary(23); // returns "10111"

--
O(N2) - Loop within a loop
O(N LOG N) -  Sorting Algorithm
O(N) - Linear - Proportional
O(Log N) - Divide and Conquer - searching Algorithm
O(1) - Constant

O(A + B) - diffrent input parameter
O(Log N) + O(N) = O(N Log N)
--
O(1): This represents constant time complexity, which means that the algorithm takes the same amount of time regardless of the input size.

O(log n): This represents logarithmic time complexity, which means that the algorithm's running time grows logarithmically with the input size.

O(n): This represents linear time complexity, which means that the algorithm's running time grows linearly with the input size.

O(n log n): This represents quasilinear time complexity, which means that the algorithm's running time grows faster than linear but slower than polynomial.

O(n^2): This represents quadratic time complexity, which means that the algorithm's running time grows quadratically with the input size.

O(2^n): This represents exponential time complexity, which means that the algorithm's running time grows exponentially with the input size.
--
Tree - Parent, Children, Leaf
--
There are several types of tree data structures, including:

Binary Trees: A binary tree is a tree data structure where each node can have at most two children, commonly referred to as the left and right child.

Binary Search Trees: A binary search tree is a binary tree where the value of each node's left child is less than the node's value, and the value of each node's right child is greater than the node's value.

AVL Trees: An AVL tree is a binary search tree that is balanced, meaning that the heights of the left and right subtrees of each node differ by at most one.

Red-Black Trees: A red-black tree is a self-balancing binary search tree where each node is either red or black, and the tree satisfies certain properties to ensure that the tree remains balanced.

B-Trees: A B-tree is a self-balancing tree data structure that is commonly used for disk-based databases and file systems. It is designed to minimize the number of disk accesses required to locate a specific piece of data.

Trie Trees: A trie, also called a prefix tree, is a tree data structure used to store a collection of strings, where each node represents a prefix or a complete string.

Segment Trees: A segment tree is a tree data structure used to efficiently answer range queries on an array or a list.

--
There are several types of graph data structures, including:

Directed Graphs (Digraphs): A directed graph is a graph where edges have a direction, meaning that they go from one vertex to another in a specific direction.

Undirected Graphs: An undirected graph is a graph where edges do not have a direction, meaning that they connect two vertices without specifying a particular direction.

Weighted Graphs: A weighted graph is a graph where each edge has a weight or cost associated with it.

Complete Graphs: A complete graph is a graph where each vertex is connected to every other vertex in the graph.

Sparse Graphs: A sparse graph is a graph where the number of edges is much smaller than the number of vertices.

Dense Graphs: A dense graph is a graph where the number of edges is close to the maximum number of edges possible.

Bipartite Graphs: A bipartite graph is a graph where the vertices can be divided into two groups such that all edges connect a vertex in one group to a vertex in the other group.

Trees: A tree is a special type of graph where there are no cycles and every vertex has exactly one parent, except for the root, which has no parent.

Directed Acyclic Graphs (DAGs): A directed acyclic graph is a directed graph with no cycles.
--
Tree - is a hierarchical data structure that consists of nodes connected by edges. Each node in a tree can have zero or more children, 
except for the root node which has no parent. 
Binary tree - is a tree data structure in which each node has at most two children, referred to as the left child and the right child.
Binary search tree - (BST) is a type of tree where each node has at most two children, 
and the values of nodes in the left subtree are less than the value of the parent node, while the values of nodes in the right subtree 
are greater than the value of the parent node.
--
BST - 
Every  node to the left of a parent node is always less than the parent
Every  node to the right of a parent node is always greater than the parent
There must be no duplicate nodes.
--
Depth First Search - PreOrder, InOrder, PostOrder
Breadth First Search - LevelOrder
--
Binary tree can be divided into following types:
Complete Binary Tree
Perfect Binary Tree
Balanced Binary Tree
--
	B
A		 C

InOrder - ABC
PreOrder - BAC
PostOrder - ACB
--
Binary Heap - MinHeap, MaxHeap
the key at root must be minimum among all key present in the binary heap.

Heapify
--
Binary Tree
BINARY TREE is unordered hence faster in process of insertion, deletion, and searching.
In BINARY TREE there is no ordering in terms of how the nodes are arranged
Data Representation is carried out in a hierarchical format.
Binary trees allow duplicate values.	
The speed of deletion, insertion, and searching operations in Binary Tree is slower as compared to Binary Search Tree because it is unordered. 

Binary Search Tree
Maintaining the order property in a binary search tree can make insertion and deletion slower compared to a regular binary tree. 
In BINARY SEARCH TREE the left subtree has elements less than the nodes element and the right subtree has elements greater than the nodes element.
Data Representation is carried out in the ordered format.
Binary Search Tree does not allow duplicate values.
Because the Binary Search Tree has ordered properties, it conducts element deletion, insertion, and searching faster.

--
collision techniques:
Open Hashing: It is also known as closed addressing.
Closed Hashing: It is also known as open addressing.

Open Hashing
In Open Hashing, one of the methods used to resolve the collision is known as a chaining method.

Closed hashing, three techniques are used to resolve the collision:
Linear probing
Linear probing is one of the forms of open addressing. As we know that each cell in the hash table contains a key-value pair, so when the collision occurs by mapping a new key to the cell already occupied by another key, then linear probing technique searches for the closest free locations and adds a new key to that empty cell. In this case, searching is performed sequentially, starting from the position where the collision occurs till the empty cell is not found.

Quadratic probing
In case of linear probing, searching is performed linearly. In contrast, quadratic probing is an open addressing technique that uses quadratic polynomial for searching until a empty slot is found.

Double Hashing technique
Double hashing is an open addressing technique which is used to avoid the collisions. When the collision occurs then this technique uses the secondary hash of the key. It uses one hash value as an index to move forward until the empty location is found.
--
Trie, also called Digital Tree or Prefix Tree
--
    public void Insert(int key)
    {
        int hash = key % table.Length;
        int i = 1;
        while (table[hash] != -1)
        {
            hash = (hash + i * i) % table.Length; // quadratic probing
            i++;
        }
        table[hash] = key;
    }

    public bool Search(int key)
    {
        int hash = key % table.Length;
        int i = 1;
        while (table[hash] != key)
        {
            if (table[hash] == -1)
            {
                return false; // key not found
            }
            hash = (hash + i * i) % table.Length; // quadratic probing
            i++;
        }
        return true; // key found
    }
--
    public void Add(int key, T value)
    {
        int index = key % elements.Length;
        int i = 0;
        while (elements[index] != null)
        {
            index = (key + i * i) % elements.Length;
            i++;
        }
        elements[index] = value;
        size++;
    }
    
    public T Get(int key)
    {
        int index = key % elements.Length;
        int i = 0;
        while (elements[index] != null)
        {
            if (elements[index].Equals(key))
            {
                return elements[index];
            }
            index = (key + i * i) % elements.Length;
            i++;
        }
        return default(T);
    }
--
Priority Queue is same as Binary Heap instead of comparing the value check the priority.
public class Node
{
    public string value;
    public int priority;
}
rightChild.priority < leftChild.priority
--
Different shortest path algorithms, such as Dijkstra's algorithm, Bellman-Ford algorithm, and Floyd-Warshall algorithm
--
BFS - Shortest Path
--
Vertex, Edge
Undirected Graph - Facebook Firends, 
Directed Graph - Instagram Follow
Weighted Graph - 
UnWeighted Graph -
Cyclic Graph - Path from a node to itself
Acyclic Graph - Tree is directed acyclic graph
Positive or Negative weighted graph -
Undirected Graph are Cyclic Graph

Dense graphs have many edges.
When the number of edges in the graph is close to the maximum number of edges, the graph is dense

Sparse Graphs
When the number of edges in the graph is significantly fewer than the maximum number of edges, the graph is sparse. 

Adjacency Matrix for representing Dense Graphs and Adjacency List for representing Sparse Graphs
--
O(V + E)
|V| = Total number of vertices (nodes) in the graph.
|E| = Total number of connections (edges) in the graph.
--
Types of Sorting
Space used - In Place, Out place 
Stability - Stable, Unstable
--
Different sorting algo will perform differently for different dataset
--
for (int i = 1000; i >= 10; i/= 5)
{
    Console.WriteLine(i);
}
//1000, 200, 40

for (int i = 1; i <= 1000; i *= 5)
{
    Console.WriteLine(i);
}
//1,5,25,125,625

for (int i = 1; i <= 1000/10; i++)
{
    Console.WriteLine(i);
}
//1-200

for (int i = 1000/10; i<=2000; i++)
{
    Console.WriteLine(i);
}
//100-2000
--
Memoization:
Memoization is an optimization process. In simple terms, we store the intermediate results of the solutions of sub-problems, allowing us to speed up the computation of the overall solution. The improvement can be reduced to an exponential time solution to a polynomial time solution, with an overhead of using additional memory for storing intermediate results.

Top-down approach
Caches the results of function calls
Recursive implementation
Well-suited for problems with a relatively small set of inputs
Used when the subproblems have overlapping subproblems

Tabulation:
Tabulation is an approach where you solve a dynamic programming problem by first filling up a table, and then compute the solution to the original problem based on the results in this table.

Bottom-up approach
Stores the results of subproblems in a table
Iterative implementation
Well-suited for problems with a large set of inputs
Used when the subproblems do not overlap