
https://eylearning.udemy.com/course/master-the-coding-interview-data-structures-algorithms/learn/lecture/12139582#overview
https://eylearning.udemy.com/course/js-algorithms-and-data-structures-masterclass/learn/lecture/8344106#overview
https://eylearning.udemy.com/course/data-structures-and-algorithms-java/learn/lecture/28748652#overview

https://www.udemy.com/course/java-data-structures-and-algorithms-masterclass/learn/lecture/24182408#learning-tools

static void Factorial()
{
    int n = 5; 
    int result = 1;

    for (int i = 1; i <= n; i++)
    {
        result *= i;
    }

    Console.WriteLine("{0}! = {1}", n, result);
}

static void Fibonacci()
{
    int n = 10;
    int a = 0, b = 1, c;

    for (int i = 2; i < n; i++)
    {
        c = a + b;
        Console.Write(" {0}", c);
        a = b;
        b = c;
    }
}

static void SumDigits()
{
    int number = 739;
    int sum = 0;
    while (number > 0) {
        int digit = number % 10; // get the rightmost digit
        sum += digit; // add the digit to the sum
        number /= 10; // remove the rightmost digit from the number
    }

    Console.WriteLine("The sum of digits is: " + sum); // // (739 % 10 = 9) | (739 / 10 = 73) 
}

public static int GetGCD(int num1, int num2)
{

    // Use Euclid's algorithm to find the GCD
    int remainder = num1 % num2;
    while (remainder != 0)
    {
        num1 = num2;
        num2 = remainder;
        remainder = num1 % num2;
    }

    return num2;
}
int gcd = GetGCD(12, 18); // returns 6

public static string DecimalToBinary(int decimalNumber)
{
    if (decimalNumber == 0)
    {
        return "0";
    }

    string binaryString = string.Empty;
    while (decimalNumber > 0)
    {
        int remainder = decimalNumber % 2;
        binaryString = remainder + binaryString;
        decimalNumber /= 2;
    }

    return binaryString;
}
string binaryNumber = DecimalToBinary(23); // returns "10111"

--
O(N2) - Loop within a loop
O(N LOG N) -  Sorting Algorithm
O(N) - Linear - Proportional
O(Log N) - Divide and Conquer - searching Algorithm
O(1) - Constant

O(A + B) - diffrent input parameter

--
O(1): This represents constant time complexity, which means that the algorithm takes the same amount of time regardless of the input size.

O(log n): This represents logarithmic time complexity, which means that the algorithm's running time grows logarithmically with the input size.

O(n): This represents linear time complexity, which means that the algorithm's running time grows linearly with the input size.

O(n log n): This represents quasilinear time complexity, which means that the algorithm's running time grows faster than linear but slower than polynomial.

O(n^2): This represents quadratic time complexity, which means that the algorithm's running time grows quadratically with the input size.

O(2^n): This represents exponential time complexity, which means that the algorithm's running time grows exponentially with the input size.
--
